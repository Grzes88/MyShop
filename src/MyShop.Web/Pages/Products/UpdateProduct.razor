@page "/updateproduct/{productid}"

@using MyShop.Web.DTO;
@using MyShop.Web.Services;

@inject ISnackbar Snackbar
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-center mt-6">
    <MudChip Color="Color.Primary"><h3>Update Product</h3></MudChip>
</div>

<div class="d-flex justify-content-center mt-6">
    <EditForm Model="@ProductDto" OnSubmit="UpdateProductAsync">
        <MudCard Class="d-flex justify-content-center" Width="500px">
            <MudCardContent>
                <MudTextField Label="Name"
                              @bind-Value="ProductDto.Name" For="@(() => ProductDto.Name)" />

                <MudTextField Label="Price"
                              @bind-Value="ProductDto.Price" For="@(() => ProductDto.Price)" />

                <MudTextField Label="Description"
                              @bind-Value="ProductDto.Description" For="@(() => ProductDto.Description)" />

                <MudSelect T="CategoryDto" Label="Category" ToStringFunc="(categoryDto) => categoryDto.Name" @bind-Value="SelectedCategory">
                    @foreach (var categoryDto in CategoryDtos)
                    {
                        <MudSelectItem T="CategoryDto" Value="categoryDto">@categoryDto.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudButton Class="mt-2" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudButton>
            </MudCardContent>
        </MudCard>
    </EditForm>
</div>

@code {
    [Parameter]
    public string ProductId { get; set; }

    public CategoryDto SelectedCategory { get; set; }
    public ProductDto ProductDto { get; set; } = new ProductDto();
    public IEnumerable<CategoryDto> CategoryDtos { get; set; } = new List<CategoryDto>();

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(ProductId, out var productId))
        {
            ProductDto = await ProductService.GetProductAsync(productId);

            CategoryDtos = await CategoryService.GetCategoriesAsync();
            SelectedCategory = ProductDto.Category;
        }
    }

    private async Task UpdateProductAsync()
    {
        var updateProductDto = new UpdateProductDto(ProductDto.Name, ProductDto.Description, ProductDto.Price, SelectedCategory.Id);
        var responseMessage = await ProductService.UpdateProductAsync(Guid.Parse(ProductId), updateProductDto);
        if(responseMessage.StatusCode == HttpStatusCode.NoContent)
        {
            Snackbar.Add("Product has been updated", Severity.Success);
        }
        else if(responseMessage.StatusCode == HttpStatusCode.BadRequest)
        {
            var responseDto = await responseMessage.Content.ReadFromJsonAsync<ResponseDto>();
            Snackbar.Add($"{responseDto.Reason}", Severity.Error);
        }
        else if(responseMessage.StatusCode == HttpStatusCode.InternalServerError)
        {
            Snackbar.Add("Internal server error. Please try again later.", Severity.Warning);
        }

        NavigationManager.NavigateTo("/getproducts/home");
    }
}