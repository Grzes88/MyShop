@page "/updateproduct/{ProductId}"

@using MyShop.Web.DTO;
@using MyShop.Web.Services;

@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-center mt-6">
    <MudChip Color="Color.Primary"><h3>Aktualizacja produktu</h3></MudChip>
</div>

<div class="d-flex justify-content-center mt-6">
    <EditForm Model="@ProductDto" OnSubmit="UpdateProductAsync">
        <MudCard Class="d-flex justify-content-center" Width="500px">
            <MudCardContent>
                <MudTextField Label="Name"
                              @bind-Value="ProductDto.Name" For="@(() => ProductDto.Name)" />

                <MudTextField Label="Price"
                              @bind-Value="ProductDto.Price" For="@(() => ProductDto.Price)" />

                <MudTextField Label="Description"
                              @bind-Value="ProductDto.Description" For="@(() => ProductDto.Description)" />

                <div class="form-group row mt-2">
                    <label for="categoryId" class="col-sm-3">CategoryDto: </label>
                    <InputSelect id="categorCategoryIdDto" class="form-control col-sm-8" @bind-Value="@CategoryId">
                        @foreach (var categoryDto in CategoryDtos)
                        {
                            <option value="@categoryDto.Id">@categoryDto.Name</option>
                        }
                    </InputSelect>
                </div>
    
                <MudButton Class="mt-2" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudButton>
            </MudCardContent>
        </MudCard>
    </EditForm>
</div>

@code {
    [Parameter]
    public string ProductId { get; set; }
    protected string CategoryId = string.Empty;

    public ProductDto ProductDto { get; set; } = new ProductDto();
    IEnumerable<CategoryDto> CategoryDtos { get; set; } = new List<CategoryDto>();

    protected override async Task OnInitializedAsync()
    {
        CategoryDtos = (await CategoryService.GetCategoriesAsync()).ToList();

        if (Guid.TryParse(ProductId, out var productId))
        {
            ProductDto = await ProductService.GetProductAsync(productId);
        }
    }

    private async Task UpdateProductAsync()
    {
        var updateProductDto = new UpdateProductDto(
            ProductDto.Name, ProductDto.Description, ProductDto.Price, Guid.Parse(CategoryId));

        await ProductService.UpdateProductAsync(Guid.Parse(ProductId), updateProductDto);

        NavigationManager.NavigateTo("/getproducts/home");
    }
}